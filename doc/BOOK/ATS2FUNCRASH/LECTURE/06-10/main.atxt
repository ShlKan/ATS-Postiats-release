%{
//
dynload
"libatsdoc/dynloadall.dats"
//
#include
"./../../MYTEXT/ats2funcrash.dats"
//
%}\
#comment("\n\
The file is automatically generated by [atsdoc] from main.atxt.\n\
")
#comment("\n\
Time of Generation: #timestamp()\
")
<chapter
 id="lecture06-10">
#title("Through ATS to Javascript")

#para("\

#emphasis("Through-one-to-all") is a catchy phrase often used to
describe ATS. When given a programming language X, a programmer often
assumes automatically that X is just meant for constructing programs
#emphasis("manually"). Sometimes, a (much) more productive approach to
writing code in X is to write some code in another programming
language for generating the needed code in X.  In this chapter, I plan
to demonstrate a style of co-programming with ATS and Javascript (JS).
In practice (of this style of co-programming), ATS is primarily
intended for high-level programming (that, for instance, makes
extensive use of combinators) and JS for relatively low-level
programming (that, for instance, handles direct interactions with the
browser running JS code).

")

#para("\

Let us take a look at a simple webpage for computing factorials
<ulink
 url=\"https://ats-lang.github.io/DOCUMENT/ATS2FUNCRASH/LECTURE/06-10/CODE/Factorial.html\">on-line</ulink>.
After inputing a natural number, one can click the
#emphasis('Evaluate') button to see some output mentioning the
factorial of the number.
Please find the HTML source for the webpage
<ulink url=\"https://github.com/ats-lang/ats-lang.github.io/tree/master/DOCUMENT/ATS2FUNCRASH/LECTURE/06-10/CODE/Factorial.html\">here</ulink>.

Note that the following JS scripts are needed for evaluating
JS code generated from ATS source:

<informalexample><programlisting>
&lt;script type=\"text/javascript\"
 src=\"https://ats-lang.github.io/LIBRARY/libatscc2js/ATS2-0.3.2/libatscc2js_all.js\"&gt;
&lt;/script&gt;
&lt;script type=\"text/javascript\"
  src=\"https://ats-lang.github.io/LIBRARY/libatscc2js/ATS2-0.3.2/libatscc2js_print_store_cats.js\"&gt;
&lt;/script&gt;
</programlisting></informalexample>

The JS code in the file #filename("Factorial_dats.js") is generated
from compiling the ATS source stored in
#filename("Factorial.dats"). The command #command("patsopt") is called
on the ATS source to compile it onto C code, and the command
#command("atscc2js") is subsequently called on the generated C code to
transpile it into JS code:

<informalexample><programlisting>
patsopt -o Factorial_dats.c -d Factorial.dats
atscc2js -o Factorial_dats.js -i Factorial_dats.c
</programlisting></informalexample>

")

#para("\

At the beginning of #filename("Factorial.dats"), the following
code is present:

#dats2xhtml('\
//
\#define ATS_MAINATSFLAG 1
\#define ATS_DYNLOADNAME "Factorial__dynload"
//
')

which indicates to #command("patsopt") that a dynload-function of the
name #dyncode("Factorial__dynload") is to be generated when the ATS
source contained in #filename("Factorial.dats") is compiled into C.
Then this dynload-function is transpiled into JS by
#command("atscc2js"), and it is supposed to be called first (to
perform initialization) before any function in the generated JS code
is put into use.

")

#para("\

The following lines in #filename("Factorial.dats")
are added for accessing the LIBATSCC2JS library, which is
needed for compiling ATS to JS:

#dats2xhtml('\
//
\#define
LIBATSCC2JS_targetloc
"$PATSHOME/contrib\\\\\\\\
/libatscc2js/ATS2-0.3.2"
//
\#include "{$LIBATSCC2JS}/staloadall.hats" // for prelude stuff
\#staload "{$LIBATSCC2JS}/SATS/print.sats" // for printing into a store
//
')

The version we use here is ATS2-0.3.2, which is the latest
stable release of LIBATSCC2JS.

")

#para("\

In the following code,
a function of the name #dyncode("funarg1_get") is declared
in ATS and implemented in JS:

#dats2xhtml('\
//
extern
fun
funarg1_get(): int = "mac\\\\#"
//
\%{^
function funarg1_get()
{
  return parseInt(document.getElementById("funarg1").value);
}
\%} (* end of external code *)
//
')

The function #dyncode("funarg1_get") essentially locates a
DOM-element identified by #dyncode("funarg1") and then converts
into an integer the string stored in the value-field of the
DOM-element.

Note that the use of the string #dyncode('"mac\\\\#"') simply
indicates to #command("patsopt") that the function
#dyncode("funarg1_get") is to be given the same name when compiled
into C.  In contrast, the name automatically chosen (by
#command("patsopt")) for #dyncode("funarg1_get") contains a long
prefix (for carrying some namespace information) if the string
#dyncode('"mac\\\\#"') is not present. In case a different name is
needed for #dyncode("funarg1_get") in C, the name should be explicitly
mentioned after the symbol #dyncode('\\\\#'). For instance, if the
string #dyncode('"mac\\\\#\JS_funarg1_get"') is used, then the name
#dyncode("JS_funarg1_get") is chosen (by #command("patsopt")) for
#dyncode("funarg1_get").  In ATS source, the code written between
#dyncode("\%{^") and #dyncode("\%}") is considered external and is
directly pasted by #command("patsopt") into the generated C code.  The
symbol #dyncode("^") means that the pasted code is to appear near the
beginning of the generated code. If the symbol #dyncode("^") is
omitted or replaced with #dyncode("$"), the pasted code is to appear
near the bottom of the generated code.

")

#para("\

The following function is called when the
#emphasis("Evaluate") button is clicked:

#dats2xhtml('\
//
extern
fun
Factorial__evaluate
  ((*void*)): void = "mac#"
//
implement
Factorial__evaluate
  ((*void*)) = let
  val () =
  the_print_store_clear()
  val arg = funarg1_get()
  val () =
  println!
  ("The factorial of ", arg, " is ", fact(arg))
  // end of [val]
  val theOutput =
    document_getElementById("theOutput")
  // end of [val]
in
  xmldoc_set_innerHTML(theOutput, the_print_store_join())
end // end of [Factorial__evaluate]
//
')

There is a global store, an array of strings, for receiving the
output generated from calling various print-functions. The function
#dyncode("the_print_store_clear") is for clearing this store and the
function #dyncode("the_print_store_join") for joining the strings
contained in the store into a single one.  Given a name,
#dyncode("document_getElementById") locates the DOM-element identified
by the name.  Given a DOM-element and a string,
#dyncode("xmldoc_set_innerHTML") updates the innerHTML-field of the
DOM-element with the string.

")

#para("\

For a more involved example, please visit <ulink
url=\"https://ats-lang.github.io/DOCUMENT/ATS2FUNCRASH/LECTURE/06-10/CODE/QueenPuzzle.html\">on-line</ulink>
a webpage for animating the process that searches (in the depth-first
fashion) for solutions to the 8-queen puzzle. The HTML source for the
webpage can be viewed <ulink
url=\"https://github.com/ats-lang/ats-lang.github.io/tree/master/DOCUMENT/ATS2FUNCRASH/LECTURE/06-10/CODE/QueenPuzzle.html\">here</ulink>,
and the code implementing depth-first search is simply adapted from some
sample ATS code presented in a previous chapter.

")

#para("\

Please find #mycodelink("LECTURE/06-10/CODE", "on-line") the entirety of
the code used in this chapter. The mentioned URL link(s) can be found as follows:

<itemizedlist>

<listitem>
#para("\
<ulink
url=\"https://ats-lang.github.io/DOCUMENT/ATS2FUNCRASH/LECTURE/06-10/CODE/Factorial.html\">https://ats-lang.github.io/DOCUMENT/ATS2FUNCRASH/LECTURE/06-10/CODE/Factorial.html</ulink>
")#comment("para")
</listitem>

<listitem>
#para("\
<ulink
url=\"https://ats-lang.github.io/DOCUMENT/ATS2FUNCRASH/LECTURE/06-10/CODE/QueenPuzzle.html\">https://ats-lang.github.io/DOCUMENT/ATS2FUNCRASH/LECTURE/06-10/CODE/QueenPuzzle.html</ulink>
")#comment("para")
</listitem>

</itemizedlist>

")#comment("para")

</chapter><!--id="lecture06-10"-->

#comment(" ****** ****** ")

#comment(" end of [main.atxt] ")

%{
implement main () = fprint_filsub (stdout_ref, "main_atxt.txt")
%}

