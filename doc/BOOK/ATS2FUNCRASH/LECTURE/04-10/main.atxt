%{
//
dynload
"libatsdoc/dynloadall.dats"
//
#include
"./../../MYTEXT/ats2funcrash.dats"
//
%}\
#comment("\n\
The file is automatically generated by [atsdoc] from main.atxt.\n\
")
#comment("\n\
Time of Generation: #timestamp()\
")
<chapter
 id="lecture04-10">
#title("Example: A Bit of Animation")

#para("\

I would like to present a very simple example of animation in this
chapter that makes use of higher-order functions. Please click <ulink
url=\"https://ats-lang.github.io/DOCUMENT/ATS2FUNCRASH/LECTURE/04-10/CODE/DigitClock.html\">here</ulink>
for a quick demo of this example.\

")

#para("\

Intuitively, animation can be performed by calling the following
function #dyncode("animate"):

#dats2xhtml('\
//
extern
fun
sleep(ms: int): void
extern
fun
animate(fwork: cfun(void)): void
//
(* ****** ****** *)
//
implement
animate(fwork) =
{
  val () = fwork()
  val () = sleep(N(*ms*))
  val () = animate(fwork)
}
//
')

The argument #dyncode("fwork") is supposed to be called to generate
some effect (for instance, outputing text on a webpage), and the
function call #dyncode("sleep(N)") pauses program execution for
#dyncode("N") milliseconds, where #dyncode("N") is fixed constant.

")

#para("\

Clearly, calling #dyncode("sleep") prevents programs from being
executed concurrently. Instead, let us combine #dyncode("sleep") and
#dyncode("animate") into one function of the name #dyncode("sleep_animate"):

#dats2xhtml('\
//
extern
fun
sleep_animate
(ms: int, fwork: cfun(void)): void
//
(* ****** ****** *)
//
implement
animate(fwork) =
{
  val () = fwork()
  val () = sleep_animate(N(*ms*), fwork)
}
//
')

What #dyncode("sleep_animate(N, fwork)") does is to schedule a call to
#dyncode("animate") on #dyncode("fwork") after #dyncode("N")
milliseconds. Note that a call to #dyncode("sleep_animate") should return
immediately, causing no pause of program execution.\

")

#para("\

Let us generalize #dyncode("sleep_animate") to the following function
#dyncode("execute_after"):

#dats2xhtml('\
//
extern
fun
execute_after
(fwork: cfun(void), ms: int): void
//
(* ****** ****** *)
//
implement
sleep_animate(ms, fwork) =
execute_after(lam() => animate(fwork), ms)
//
')

Given a thunk #dyncode("fwork") (that is, a closure-function
returning void) and an integer #dyncode("ms"), #dyncode("execute_after")
schedules a call to #dyncode("fwork") after #dyncode("ms") milliseconds.

")

#para("\

If we target JS, then the function #dyncode("execute_after") can be
implemented as follows:

#dats2xhtml('\
//
implement
execute_after
  (fwork, ms) = (
//
$extfcall
(void, "setTimeout", cloref2fun0(fwork), ms)
//
) (* end of [execute_after] *)
//
')

where the keyword #keycode("$extfcall") initiates a call to the native
function #dyncode("setTimeout") in JS, and the function #dyncode("cloref2fun0")
converts a (nullary) closure-function into an envless function (that
is, one with no environment).

")

#para("\

As an example, please find the ATS source in <ulink
url=\"https://github.com/ats-lang/ats-lang.github.io/blob/master/DOCUMENT/ATS2FUNCRASH/LECTURE/04-10/CODE/DigitClock.dats\">DigitClock.dats</ulink>
for a digital clock directly based on #dyncode("animate"). And please
click <ulink
url=\"https://ats-lang.github.io/DOCUMENT/ATS2FUNCRASH/LECTURE/04-10/CODE/DigitClock.html\">here</ulink>
for a demo of the digital clock.

")

#para("\

Given N, fwork, and ms, the following function
#dyncode("repeat_execute_after") executes the calls
#dyncode("fwork(i)") for i ranging from 0 to N-1 and then repeats:

#dats2xhtml('\
//
extern
fun
repeat_execute_after
( N: int,
  fwork: (int) -> void, ms: int) : void = "mac#"
//
implement
repeat_execute_after
(
N, fwork, ms
) = let
//
fun
auxmain(i: int): void =
if i >= N
  then auxmain(0)
  else (fwork(i); execute_after(lam() => auxmain(i+1), ms))
//
in
  auxmain(0)
end // end of [repeat_execute_after]
//
')

For any two consecutive calls to #dyncode("fwork"), there is a delay
of #dyncode("ms") milliseconds between them. In a case where a call to
#dyncode("fwork") draws an image, calling
#dyncode("repeat_execute_after") may create an animation effect of
some sort. For example, please click <ulink
url=\"https://ats-lang.github.io/DOCUMENT/ATS2FUNCRASH/LECTURE/04-10/CODE/Sierpinski.html\">here</ulink>
to see an animated version of the example of Sierpinkski triangle
presented previously.

")

#para("\

Please find #mycodelink("LECTURE/04-10/CODE", "on-line") the entirety
of the code used in this chapter. The mentioned URL link(s) can be found as follows:

<itemizedlist>

<listitem>
#para("\
<ulink
url=\"https://ats-lang.github.io/DOCUMENT/ATS2FUNCRASH/LECTURE/04-10/CODE/DigitClock.html\">https://ats-lang.github.io/DOCUMENT/ATS2FUNCRASH/LECTURE/04-10/CODE/DigitClock.html</ulink>
")#comment("para")
</listitem>

<listitem>
#para("\
<ulink
url=\"https://github.com/ats-lang/ats-lang.github.io/blob/master/DOCUMENT/ATS2FUNCRASH/LECTURE/04-10/CODE/DigitClock.dats\">https://github.com/ats-lang/ats-lang.github.io/blob/master/DOCUMENT/ATS2FUNCRASH/LECTURE/04-10/CODE/DigitClock.dats</ulink>
")#comment("para")
</listitem>

<listitem>
#para("\
<ulink
url=\"https://ats-lang.github.io/DOCUMENT/ATS2FUNCRASH/LECTURE/04-10/CODE/Sierpinski.html\">https://ats-lang.github.io/DOCUMENT/ATS2FUNCRASH/LECTURE/04-10/CODE/Sierpinski.html</ulink>
")#comment("para")
</listitem>

<listitem>
#para("\
<ulink
url=\"https://github.com/ats-lang/ats-lang.github.io/blob/master/DOCUMENT/ATS2FUNCRASH/LECTURE/04-10/CODE/Sierpinski.dats\">https://github.com/ats-lang/ats-lang.github.io/blob/master/DOCUMENT/ATS2FUNCRASH/LECTURE/04-10/CODE/Sierpinski.dats</ulink>
")#comment("para")
</listitem>

</itemizedlist>

")#comment("para")

</chapter><!--id="lecture04-10"-->

#comment(" ****** ****** ")

#comment(" end of [main.atxt] ")

%{
implement main () = fprint_filsub (stdout_ref, "main_atxt.txt")
%}

