%{
//
dynload
"libatsdoc/dynloadall.dats"
//
#include
"./../../MYTEXT/ats2funcrash.dats"
//
%}\
#comment("\n\
The file is automatically generated by [atsdoc] from main.atxt.\n\
")
#comment("\n\
Time of Generation: #timestamp()\
")
<chapter
 id="lecture02">
#title("Recursive Functions (1)")

#para('\

Recursion, which literally means #emphasis("running back"), plays a
pivotal role in problem-solving.  For instance, a problem-solving
strategy based on divide-and-conquer divides a given problem (that
cannot be solved immediately) into subproblems of a similar nature so
that the same strategy can be applied to these subproblems
#emphasis("recursively"); the obtained solutions to these subproblems
are then combined in some manner to form a solution to the original
problem.

')

#para('\

As the first example, let us implement the factorial function
that takes a natural number #dyncode("n") and returns the product of
the first #dyncode("n") positive integers. In the following
code, a function of the name #dyncode("fact") is defined recursively:

#dats2xhtml('\
//
fun
fact(n: int): int =
if n > 0 then n * fact(n-1) else 1
//
')

The keyword #keycode("fun") initiates the definition of a function,
and the function header following #keycode("fun") specifies that
#dyncode("fact") is a function taking an integer as its argument
and returning another integer as its result. For testing #dyncode("fact"),
let us include the following line:

#dats2xhtml('\
val () = println! ("fact(10) = ", fact(10))
')

where #dyncode("println!") is a function-like in ATS, which resembles
a function but is not actually a function. In this case,
#dyncode("println!") can be thought of as a macro that calls a print
function on each of its arguments and then prints out a newline at the
end. Please do not forget the symbol #dyncode("!") in the name
#dyncode("println!").

')

#para('\

Suppose we need to call #dyncode("fact") on all of the
natural numbers less than a given one (e.g., 100). We can first
define a function #dyncode("testfact") as follows and then call
#dyncode("testfact") on the given natural number:

#dats2xhtml('\
//
fun
testfact
(n: int): void =
if n > 0 then
(
  testfact(n-1);
  println! ("fact(", n-1, ") = ", n-1)
) (* end of [if] *)
//
')

The function header for #dyncode("testfact") indicates that
#dyncode("testfact") takes an integer as its arguments and returns a
void-value (of the type #stacode("void")). Often a function is said to
return no value if its return is a void-value. Note that the semicolon
symbol is for sequencing; a sequence of expressions separated by
semicolons are evaluated from left to right and the value returned
from evaluating the last expression is taken as the value from
evaluating the sequence.  \

')

#para('\

In imperative programming, a function like #dyncode("testfact") is
normally implemented in terms of a for-loop (instead of being defined
recursively). While there is indeed direct support for for-loops and
while-loops in ATS, I will not attempt to make use of the support in
this book. I hope to make a convincing argument that making extensive
use of recursion is a key to increasing one\'s programming
producivity.  In fact, I think that a functional programmer should
develop a reflex for solving problems recursively.

')

#para("\

As another example, the following function #dyncode("fibo")
is defined to compute Fibonacci numbers:

#dats2xhtml('\
//
fun
fibo(n: int): int =
  if n > 2 then fibo(n-1)+fibo(n-2) else 1
//
')

The first and the second Fibonacci numbers are 1.  Given a positive
integer #emphasis("n") greater than 2, the #emphasis("n")th Fibonacci
number equals the sum of the previous two Fibonacci numbers. This
implementation of #dyncode("fibo") is of expontial time complexity,
and it is probably impractical to call it on any integer that is 50 or
greater.

")

#para("\

For a slightly more interesting example, please study the code in
<ulink
url=\"https://github.com/ats-lang/ats-lang.github.io/blob/master/DOCUMENT/ATS2FUNCRASH/LECTURE/02/CODE/multable.dats\">
multable.dats</ulink>, which can be executed to generate the html file <ulink
url=\"https://ats-lang.github.io/DOCUMENT/ATS2FUNCRASH/LECTURE/02/CODE/multable.html\">
multable.html</ulink> for displaying a multiplication table.

")

#para("\

Please find #mycodelink("LECTURE/02/CODE", "on-line") the entirety
the code used in this chapter. The mentioned URL link(s) can be found as follows:

<itemizedlist>

<listitem>
#para("\
<ulink
url=\"https://ats-lang.github.io/DOCUMENT/ATS2FUNCRASH/LECTURE/02/CODE/multable.html\">https://ats-lang.github.io/DOCUMENT/ATS2FUNCRASH/LECTURE/02/CODE/multable.html</ulink>
")#comment("para")
</listitem>

</itemizedlist>

")#comment("para")

</chapter><!--id="lecture02"-->

#comment(" ****** ****** ")

#comment(" end of [main.atxt] ")

%{
implement main () = fprint_filsub (stdout_ref, "main_atxt.txt")
%}

