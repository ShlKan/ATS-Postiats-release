%{
//
dynload
"libatsdoc/dynloadall.dats"
//
#include
"./../../MYTEXT/ats2funcrash.dats"
//
%}\
#comment("\n\
The file is automatically generated by [atsdoc] from main.atxt.\n\
")
#comment("\n\
Time of Generation: #timestamp()\
")
<chapter
 id="lecture03-10">
#title("Example: Sierpinski Triangle")

#para("\

A Sierpinski triangle is a fractal that can be constructed by first
removing the medial triangle or midpoint triangle of a given triangle
and then doing so recursively to the three triangles formed due to
this removal. I would like to present in this chapter a program for
drawing a Sierpinksi triangle (of which a demo can be seen by clicking
<ulink
url=\"https://ats-lang.github.io/DOCUMENT/ATS2FUNCRASH/LECTURE/03-10/CODE/Sierpinski.html\">here</ulink>).
This is also a place for me to advocate the so-called refinement-based
programming.

")

#para("\

A triangle can be represented as a tuple of three points. Let us
introduce an abstract type for points:

#sats2xhtml('\
//
abstype point // abstract type for points 
//
')

Given two points A and B, the following function #dyncode("midpoint")
returns the middle point lying on the line segment connecting A and B:

#dats2xhtml('\
//
extern
fun
midpoint(A: point, B: point): point = "mac#"
//
')

The use of #dyncode('"mac#"') is to indicate to #command('patsopt')
that the function #dyncode("midpoint") should be compiled into a function
in C of the same name.

")

#para("\

Given three points A, B, and C, the following function
#dyncode("SierpinskiDraw") draws (in some manner) the Sierpinkski
triangle inside the triangle ABC:

#dats2xhtml('\
//
extern
fun
SierpinskiDraw
( n: int
, A: point, B: point, C: point): void = "mac#"
//
')

Note that the first parameter of #dyncode("SierpinskiDraw") sets the
limit for the recursion depth. An implementation of #dyncode("SierpinskiDraw")
is given as follows:

#dats2xhtml('\
//
implement
SierpinskiDraw
(n, A, B, C) = (
//
if
(n > 0)
then let
//
val AB = midpoint(A, B)
val BC = midpoint(B, C)
val CA = midpoint(C, A)
//
val () = TriangleRemove(AB, BC, CA)
//
val () = SierpinskiDraw(n-1, A, AB, CA)
val () = SierpinskiDraw(n-1, B, BC, AB)
val () = SierpinskiDraw(n-1, C, CA, BC)
//
in
  // nothing
end // end of [then]
else () // end of [else]
//
) (* end of [SierpinskiDraw] *)
//
')

where the function #dyncode("TriangleRemove") inside the body
of #dyncode("SierpinskiDraw") is given the following interface:

#dats2xhtml('\
//
extern
fun
TriangleRemove
  (A: point, B: point, C: point): void = "mac#"
//
')

")

#para("\

ATS source can be compiled into many programming languages, including
C, Javascript (JS), PHP, etc. For instance, we may choose JS as the
target language for compiling ATS. With this choice, we can implement
#dyncode("TriangleRemove") in JS directly:

#dats2xhtml('\
%{
//
function
TriangleRemove
 (A, B, C)
{
  theCtx.save();
//
  theCtx.beginPath();
  theCtx.moveTo(A.x, A.y);
  theCtx.lineTo(B.x, B.y);
  theCtx.lineTo(C.x, C.y);
  theCtx.closePath();
//
  theCtx.fill();
//
  theCtx.restore();
} // end of [TriangleRemove]
//
%}
')

The code between #keycode('%{') and #keycode('%}') is considered to be
external by #command('patsopt'), and it is pasted into the compilation
output verbatim.  The variable #dyncode("theCtx") refers to the
2-dimensional context associated with certain canvas (in the DOM
tree); what the function #dyncode("TriangleRemove") does is drawing a
closed path that forms the boundary of the triangle positioned at
three given points and then filling the closed path with some color.

")

#para("\

The function #dyncode("midpoint") can also be conveniently implemented
in JS:

#dats2xhtml('\
%{
//
function
midpoint
(p1, p2)
{
//
  var
  xmid = (p1.x + p2.x)/2;
  var
  ymid = (p1.y + p2.y)/2;
//
  return { x: xmid, y: ymid };
//
}
//
%}
')

Various coding details that are omitted for brevity can be found in
the file <ulink
url=\"https://github.com/ats-lang/ats-lang.github.io/blob/master/DOCUMENT/ATS2FUNCRASH/LECTURE/03-10/CODE/Sierpinski.dats\">Sierpinski.dats</ulink>.
I will talk more about co-programming with ATS and JS in a chapter
presented later in this book.\

")

#para("\

Please find #mycodelink("LECTURE/03-10/CODE", "on-line") the entirety of
the code used in this chapter. The mentioned URL link(s) can be found as follows:

<itemizedlist>

<listitem>
#para("\
<ulink
url=\"https://ats-lang.github.io/DOCUMENT/ATS2FUNCRASH/LECTURE/03-10/CODE/Sierpinski.html\">https://ats-lang.github.io/DOCUMENT/ATS2FUNCRASH/LECTURE/03-10/CODE/Sierpinski.html</ulink>
")#comment("para")
</listitem>

<listitem>
#para("\
<ulink
url=\"https://github.com/ats-lang/ats-lang.github.io/blob/master/DOCUMENT/ATS2FUNCRASH/LECTURE/03-10/CODE/Sierpinski.dats\">https://github.com/ats-lang/ats-lang.github.io/blob/master/DOCUMENT/ATS2FUNCRASH/LECTURE/03-10/CODE/Sierpinski.dats</ulink>
")#comment("para")
</listitem>

</itemizedlist>

")#comment("para")

</chapter><!--id="lecture03-10"-->

#comment(" ****** ****** ")

#comment(" end of [main.atxt] ")

%{
implement main () = fprint_filsub (stdout_ref, "main_atxt.txt")
%}

