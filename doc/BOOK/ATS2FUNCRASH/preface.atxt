%{
//
dynload
"libatsdoc/dynloadall.dats"
//
#include
"./MYTEXT/ats2funcrash.dats"
//
%}\
#comment("\n\
The file is automatically generated by [atsdoc] from main.atxt.\n\
")
#comment("\n\
Time of Generation: #timestamp()\
")
<preface>
#langeng("
#title("Preface")
")
#langchin("
#title("引言")
")

#para('\

This book consists of a set of lecture notes for a crash course on
functional programming in ATS. The primary focus of these notes is set
upon advocating a style of problem-solving that makes extensive use of
list-processing and stream-processing functions. The average reader is
expected to have already had some exposure to programming (e.g.,
having taken one semester of programming course based on Java or Python)
but may not know much or anything about functional programming. After finishing
this course, one will have become familiar with recursion in problem-solving
and ready to formulate high-level combinator-based programming solutions.

')

</preface>

#comment(" end of [preface.atxt] ")

%{
implement main () = fprint_filsub (stdout_ref, "preface_atxt.txt")
%}
