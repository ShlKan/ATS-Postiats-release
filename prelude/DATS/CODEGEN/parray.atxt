%{
#define ATSCODEFORMAT "txt"
#if (ATSCODEFORMAT == "txt")
#include "utils/atsdoc/HATS/postiatsatxt.hats"
#endif // end of [ATSCCODEFORMAT]
val _thisfilename = atext_strcst"parray.dats"
val () = theAtextMap_insert_str ("thisfilename", _thisfilename)
%}\
\
#atscode_banner()
#atscode_copyright_GPL()

#atscode_separator()

#atscode_author("Hongwei Xi")
#atscode_start_time("April, 2012")
#atscode_authoremail("hwxiATcsDOTbuDOTedu")

#atscode_separator()

(*
** Source:
** $PATSHOME/prelude/DATS/CODEGEN/parray.atxt
** Time of generation: #timestamp()
*)

#atscode_separator()

staload UN = "prelude/SATS/unsafe.sats"

#atscode_separator()

implement
{a}(*tmp*)
parray_is_empty
  {l}{n}(pf | p) = let
//
prval () =
  lemma_parray_v_params(pf)
//
val x = $UN.ptr0_get<ptr>(p)
val [lx:addr] x = g1ofg0_ptr(x)
//
prval () =
__assert__() where
{
extern praxi
__assert__(): [(lx <= null && n==0) || (lx > null && n > 0)] void
} (* end of [prval] *)
//
in
  lte_ptr1_ptr1(x, the_null_ptr)
end // end of [parray_is_empty]

implement
{a}(*tmp*)
parray_isnot_empty
  {l}{n} (pf | p) = let
//
prval () =
  lemma_parray_v_params(pf)
//
val x = $UN.ptr0_get<ptr>(p)
val [lx:addr] x = g1ofg0_ptr(x)
//
prval () =
__assert__() where
{
extern praxi
__assert__ (): [(lx <= null && n==0) || (lx > null && n > 0)] void
} (* end of [prval] *)
//
in
  gt_ptr1_ptr1(x, the_null_ptr)
end // end of [parray_isnot_empty]

#atscode_separator()

implement
{a}(*tmp*)
parray_size
  (pf | p0) = let
//
fun
loop
{l:addr}
{i,j:nat} .<i>.
(
  pf: !parray_v(a, l, i)
| p0: ptr(l), j0: size_t(j)
) :<> size_t(i+j) = let
//
  val
  isnot =
  parray_isnot_empty<a>(pf | p0)
//
in
//
  if
  isnot
  then asz where
  {
  prval
  parray_v_cons
    (pf1, pf2) = pf
    val asz =
    loop(pf2 | ptr_succ<a>(p0), j0+1)
  prval ((*returned*)) =
    (pf := parray_v_cons{a}(pf1, pf2))
  } (* end of [then] *)
  else (j0) // end of [else]
// end if [if]
end (* end of [loop] *)
//
in
let
prval () =
lemma_parray_v_params(pf) in loop(pf | p0, i2sz(0))
end // end of [let]
end // end of [parray_size]

#atscode_separator()

#atscode_eof_strsub("\#thisfilename$")\

%{
implement
main (argc, argv) =
  fprint_filsub (stdout_ref, "parray_atxt.txt")
%}\
