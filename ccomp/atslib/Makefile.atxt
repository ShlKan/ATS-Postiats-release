%{
//
staload
UN = "prelude/SATS/unsafe.sats"
//
staload
_(*anon*) = "prelude/DATS/list.dats"
staload
_(*anon*) = "prelude/DATS/list_vt.dats"
//
staload
STDIO = "libc/SATS/stdio.sats"
staload TIME = "libc/SATS/time.sats"
//
dynload "libatsdoc/dynloadall.dats"
//
staload "libatsdoc/SATS/libatsdoc_atext.sats"
//
%}\
%{

#define DIRSEP '/'

fun comment
  (x: string): atext = atext_nil ()
// end of [comment]

fun stringrepl
  (str: string, c0: char, c1: char): string = let
//
fun loop {n:nat}
(
  str: string n, i: sizeLte n, res: List_vt (char)
) :<cloref1> List_vt (char) = let
in
//
if string_isnot_atend (str, i) then let
  val c = str[i]
in
  if c != c0 then
    loop (str, i+1, list_vt_cons (c, res))
  else
    loop (str, i+1, list_vt_cons (c1, res))
  // end of [if]
end else res // end of [if]
//
end // end of [loop]
//
val str = string1_of_string (str)
val cs = loop (str, (size1_of_int1)0, list_vt_nil)
val len = list_vt_length (cs)
val sbuf = string_make_list_rev_int ($UN.linlst2lst(cs), len)
val () = list_vt_free (cs)
//
in
  $UN.castvwtp0{string}(sbuf)
end // end of [stringrepl]

fun
make_entry
(
  lib: string, fnm: string
) : atext = let
//
val lib2 = stringrepl (lib, '/', '_')
val fnm2 = stringrepl (fnm, '/', '_')
val fnm2 = stringrepl (fnm2, '.', '_')
val libfnm2 = sprintf ("%s_%s", @(lib2, fnm2))
val libfnm2 = string_of_strptr (libfnm2)
//
val ent = sprintf
("\
atslib_%s:: atslib_%s\n\
atslib_%s: output/atslib_%s.o ; $(ARR) lib/libatslib.a $<\n\
output/atslib_%s.c: $(PATSHOME0)/%s/%s ; $(PATSOPT) -o $@ --dynamic $<\n\
output/atslib_%s.o: output/atslib_%s.c ; \\\n\
  $(CCOMP) -I$(PATSHOMEQ) -I$(PATSRUNTIME) $(DATSMEMALLOC) $(CCFLAGS) -c -o $@ $<\n\
clean:: ; $(RMF) output/atslib_%s.c\n\
clean:: ; $(RMF) output/atslib_%s.o\n\
", 
@(
  lib2, libfnm2, libfnm2, libfnm2, libfnm2, lib, fnm, libfnm2, libfnm2, libfnm2, libfnm2
)
) // end of [val]
//
val ent = string_of_strptr (ent)
in
  atext_strcst (ent)
end // end of [make_entry]

%}\
######
#
#
# This Makefile is automatically generated
# from executing the following command-line:
#
# make -f Makefile.gen
#
#
######

PATSHOME0=$(PATSHOME)
PATSHOMEQ="$(PATSHOME)"

######

PATSCC=$(PATSHOMEQ)/bin/patscc
PATSOPT=$(PATSHOMEQ)/bin/patsopt
PATSRUNTIME=$(PATSHOMEQ)/ccomp/runtime

######

CCOMP=gcc
CCFLAGS=-fPIC -O2

######
#
DATSMEMALLOC=
#
# DATSMEMALLOC=-DATS_MEMALLOC_LIBC
# DATSMEMALLOC=-DATS_MEMALLOC_GCBDW
#
######

all:: atslib
all:: ; ranlib lib/libatslib.a

######

atslib:: atslib_prelude

######

#make_entry("prelude", "DATS/basics.dats")

######

#make_entry("prelude", "DATS/integer.dats")
#make_entry("prelude", "DATS/pointer.dats")

#make_entry("prelude", "DATS/integer_long.dats")
#make_entry("prelude", "DATS/integer_size.dats")
#make_entry("prelude", "DATS/integer_short.dats")

#make_entry("prelude", "DATS/bool.dats")
#make_entry("prelude", "DATS/char.dats")
#make_entry("prelude", "DATS/float.dats")
#make_entry("prelude", "DATS/string.dats")
#make_entry("prelude", "DATS/strptr.dats")
#make_entry("prelude", "DATS/integer_ptr.dats")
#make_entry("prelude", "DATS/integer_fixed.dats")

######

#make_entry("prelude", "DATS/filebas.dats")

######

atslib:: atslib_libats

######

#make_entry("libats", "DATS/stringbuf.dats")

######

#make_entry("libats", "DATS/funmap_list.dats")
#make_entry("libats", "DATS/funmap_avltree.dats")
#make_entry("libats", "DATS/funset_listord.dats")
#make_entry("libats", "DATS/funset_avltree.dats")
#make_entry("libats", "DATS/funarray_braunt.dats")
#make_entry("libats", "DATS/fundeque_fngtree.dats")
#make_entry("libats", "DATS/funralist_nested.dats")

######

#make_entry("libats", "DATS/linmap_list.dats")
#make_entry("libats", "DATS/linmap_randbst.dats")
#make_entry("libats", "DATS/linmap_skiplist.dats")
#make_entry("libats", "DATS/linset_listord.dats")
#make_entry("libats", "DATS/linset_avltree.dats")
#make_entry("libats", "DATS/linralist_nested.dats")

######

#make_entry("libats", "DATS/hashtbl_chain.dats")

######

atslib:: atslib_libats_ML

######

#make_entry("libats/ML", "DATS/list0.dats")
#make_entry("libats/ML", "DATS/option0.dats")
#make_entry("libats/ML", "DATS/array0.dats")
#make_entry("libats/ML", "DATS/matrix0.dats")
#make_entry("libats/ML", "DATS/string.dats")
#make_entry("libats/ML", "DATS/strarr.dats")

######

#make_entry("libats/ML", "DATS/argvec.dats")

######

#make_entry("libats/ML", "DATS/gvalue.dats")

######

#make_entry("libats/ML", "DATS/dynarray.dats")
#make_entry("libats/ML", "DATS/hashtblref.dats")

######

#make_entry("libats/ML", "DATS/filebas.dats")
#make_entry("libats/ML", "DATS/filebas_dirent.dats")

######

#make_entry("libats/ML", "COMPILE/DATS/array0.dats")
#make_entry("libats/ML", "COMPILE/DATS/string.dats")
#make_entry("libats/ML", "COMPILE/DATS/funmap.dats")
#make_entry("libats/ML", "COMPILE/DATS/funarray.dats")
#make_entry("libats/ML", "COMPILE/DATS/hashtblref.dats")

######

atslib:: atslib_libats_libc

######

#make_entry("libats/libc", "DATS/math.dats")
#make_entry("libats/libc", "DATS/float.dats")
#make_entry("libats/libc", "DATS/errno.dats")
#make_entry("libats/libc", "DATS/fcntl.dats")
#make_entry("libats/libc", "DATS/dirent.dats")
#make_entry("libats/libc", "DATS/stdio.dats")
#make_entry("libats/libc", "DATS/stdlib.dats")
#make_entry("libats/libc", "DATS/string.dats")
#make_entry("libats/libc", "DATS/strings.dats")
#make_entry("libats/libc", "DATS/time.dats")
#make_entry("libats/libc", "DATS/unistd.dats")

######

#make_entry("libats/libc", "DATS/sys/stat.dats")
#make_entry("libats/libc", "DATS/sys/types.dats")
#make_entry("libats/libc", "DATS/sys/socket.dats")
#make_entry("libats/libc", "DATS/sys/socket_in.dats")

######

ARR=ar -r
RMF=rm -f

######

clean:: ; $(RMF) *~
clean:: ; $(RMF) *_?ats.o
clean:: ; $(RMF) *_?ats.c
clean:: ; $(RMF) *_atxt.txt
clean:: ; $(RMF) *_atxt.dats

cleanall:: clean
cleanall:: ; $(RMF) Makefile.exe
cleanall:: ; $(RMF) lib/libatslib.a

###### end of [Makefile] ######
\
%{
implement main () = fprint_filsub (stdout_ref, "Makefile_atxt.txt")
%}\
